##########################################################################################################################
# File automatically-generated by tool: [projectgenerator] version: [4.1.0] date: [Wed Dec 13 11:53:05 BDT 2023]
##########################################################################################################################

# ------------------------------------------------
# Generic Makefile (based on gcc)
#
# ChangeLog :
#	2017-02-10 - Several enhancements + project update mode
#   2015-07-22 - first version
# ------------------------------------------------

######################################
# target
######################################
TARGET = CAN_PWM_test


######################################
# building variables
######################################
# debug build?
DEBUG = 1
# optimization
OPT = -Og

GCC_PATH="C:/Program Files/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/bin"
# GCPP_PATH="C:/Program Files/arm-gnu-toolchain-13.2.rel1-mingw-w64-i686-arm-none-eabi/bin"


#######################################
# paths
#######################################
# Build path
BUILD_DIR = build

######################################
# source
######################################
# C sources
C_SOURCES =  \
Src/main.c \
Src/stm32f3xx_it.c \
Src/stm32f3xx_hal_msp.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_ll_usb.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_rcc_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_gpio.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_dma.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_cortex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pwr_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_flash.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_flash_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_i2c.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_i2c_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_exti.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_spi.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_spi_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_tim.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_tim_ex.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd.c \
Drivers/STM32F3xx_HAL_Driver/Src/stm32f3xx_hal_pcd_ex.c \
Src/system_stm32f3xx.c

# /* USER CODE BEGIN  */
# CPP_SOURCES =  \
# Drivers/WProgram.cpp \
# Drivers/tm1638-library/TM1638.cpp \
# /* USER CODE END  */

# ASM sources
ASM_SOURCES =  \
startup_stm32f303xc.s


#######################################
# binaries
#######################################
PREFIX = arm-none-eabi-
# The gcc compiler bin path can be either defined in make command via GCC_PATH variable (> make GCC_PATH=xxx)
# either it can be added to the PATH environment variable.
ifdef GCC_PATH
CC = $(GCC_PATH)/$(PREFIX)gcc
AS = $(GCC_PATH)/$(PREFIX)gcc -x assembler-with-cpp
CP = $(GCC_PATH)/$(PREFIX)objcopy
SZ = $(GCC_PATH)/$(PREFIX)size
else
CC = $(PREFIX)gcc
AS = $(PREFIX)gcc -x assembler-with-cpp
CP = $(PREFIX)objcopy
SZ = $(PREFIX)size
endif
HEX = $(CP) -O ihex
BIN = $(CP) -O binary -S

# /* USER CODE BEGIN */

# ifdef GCPP_PATH
# CPP = $(GCPP_PATH)/$(PREFIX)g++
# ASPP = $(GCPP_PATH)/$(PREFIX)g++ -x assembler-with-cpp
# OCPP = $(GCPP_PATH)/$(PREFIX)objcopy
# SZCPP = $(GCPP_PATH)/$(PREFIX)size
# endif

# /* USER CODE END */

 
#######################################
# CFLAGS
#######################################
# cpu
CPU = -mcpu=cortex-m4

# fpu
FPU = -mfpu=fpv4-sp-d16

# float-abi
FLOAT-ABI = -mfloat-abi=hard

# mcu
MCU = $(CPU) -mthumb $(FPU) $(FLOAT-ABI)

# macros for gcc
# AS defines
AS_DEFS = 

# C defines
C_DEFS =  \
-DUSE_HAL_DRIVER \
-DSTM32F303xC


# AS includes
AS_INCLUDES = 

# C includes
C_INCLUDES =  \
-IInc \
-IDrivers/STM32F3xx_HAL_Driver/Inc \
-IDrivers/STM32F3xx_HAL_Driver/Inc/Legacy \
-IDrivers/CMSIS/Device/ST/STM32F3xx/Include \
-IDrivers/CMSIS/Include

# CPP_INCLUDES = \
# -IDrivers \
# -IDrivers/tm1638-library



# compile gcc flags
ASFLAGS = $(MCU) $(AS_DEFS) $(AS_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections

CFLAGS += $(MCU) $(C_DEFS) $(C_INCLUDES) $(OPT) -Wall -fdata-sections -ffunction-sections
# /* USER CODE BEGIN flags */
# CPPFLAGS = $(MCU) $(C_DEFS) $(CPP_INCLUDES) $(CPP_SOURCES) $(OPT) -Wall -fdata-sections -ffunction-sections -x c++
# /* USER CODE END flags */

ifeq ($(DEBUG), 1)
CFLAGS += -g -gdwarf-2
endif

# /* USER CODE BEGIN cpp */

# /* USER CODE END cpp */

# Generate dependency information
CFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"
# CPPFLAGS += -MMD -MP -MF"$(@:%.o=%.d)"


#######################################
# LDFLAGS
#######################################
# link script
LDSCRIPT = STM32F303VCTx_FLASH.ld

# libraries
LIBS = -lc -lm -lnosys
LIBDIR = 
LDFLAGS = $(MCU) -specs=nano.specs -T$(LDSCRIPT) $(LIBDIR) $(LIBS) -Wl,-Map=$(BUILD_DIR)/$(TARGET).map,--cref -Wl,--gc-sections

# /* USER CODE BEGIN debug */
#ocd
OCD = openocd
BOARD = stm32f3discovery
OCD_BOARD_PATH = "C:/Program Files/openocd-0.10.0/scripts/board"

OCD_INTERFACE_PATH = "C:/Program Files/openocd-0.10.0/scripts/interface"
OCD_INTERFACE = "stlink-v2-1"

# ST-utils
ST-FLASH = "st-flash"
ST-INFO = "st-info"
ST-UTIL = "st-util"
ST-TRACE = "st-trace"

GDB_PORT = "3333"

ST_DEBUG_FLAGS = "-p$(GDB_PORT) -m"



# /* USER CODE END debug */

# default action: build all
all: clean $(BUILD_DIR)/$(TARGET).elf $(BUILD_DIR)/$(TARGET).hex $(BUILD_DIR)/$(TARGET).bin install


#######################################
# build the application
#######################################
# list of objects
OBJECTS = $(addprefix $(BUILD_DIR)/,$(notdir $(C_SOURCES:.c=.o)))
vpath %.c $(sort $(dir $(C_SOURCES)))

OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(CPP_SOURCES:.cpp=.o)))
vpath %.cpp $(sort $(dir $(CPP_SOURCES)))

# list of ASM program objects
OBJECTS += $(addprefix $(BUILD_DIR)/,$(notdir $(ASM_SOURCES:.s=.o)))
vpath %.s $(sort $(dir $(ASM_SOURCES)))


# # /* USER CODE BEGIN cpp */
# ifdef GCPP_PATH
# $(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
# 	$(CPP) -c $(CFLAGS) $(CPP_INCLUDES) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@

# $(BUILD_DIR)/%.o: %.cpp Makefile | $(BUILD_DIR)
# 	$(CPP) -c $(CPPFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.cpp=.lst)) $< -o $@
# else
$(BUILD_DIR)/%.o: %.c Makefile | $(BUILD_DIR)
	$(CC) -c $(CFLAGS) -Wa,-a,-ad,-alms=$(BUILD_DIR)/$(notdir $(<:.c=.lst)) $< -o $@
# endif
# /* USER CODE END cpp */

$(BUILD_DIR)/%.o: %.s Makefile | $(BUILD_DIR)
	$(AS) -c $(CFLAGS) $< -o $@

$(BUILD_DIR)/$(TARGET).elf: $(OBJECTS) Makefile
	$(CC) $(OBJECTS) $(LDFLAGS) -o $@
	$(SZ) $@

$(BUILD_DIR)/%.hex: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(HEX) $< $@
	
$(BUILD_DIR)/%.bin: $(BUILD_DIR)/%.elf | $(BUILD_DIR)
	$(BIN) $< $@	
	
$(BUILD_DIR):
	mkdir $@		

# /* USER CODE BEGIN debug */
install: $(BUILD_DIR)/$(TARGET).bin
	$(ST-FLASH) erase
	$(ST-FLASH) write $< 0x08000000
	$(ST-FLASH) reset


# 	@$(taskkill /IM openocd)
# 	$(OCD) -f $(OCD_BOARD_PATH)/$(BOARD).cfg -f"$(OCD_INTERFACE_PATH)/$(OCD_INTERFACE).cfg" \
# 	-c init -c"reset halt" -c"flash erase_sector 0 0 127" -c"flash write_image $(TRAGET).elf" \
# 	-c"reset init" -c"reset run" -c"exit"


run: install | $(BUILD_DIR)/$(TARGET).bin
	$(ST-UTIL) $(ST_DEBUG_FLAGS)


# /* USER CODE END debug */  target remote localhost:3333

#######################################
# clean up
#######################################
clean:
	rm -fR $(BUILD_DIR)

#######################################
# dependencies
#######################################
-include $(wildcard $(BUILD_DIR)/*.d)

# *** EOF ***
